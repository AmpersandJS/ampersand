{
  "name": "joi",
  "description": "Object schema validation",
  "version": "2.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/spumko/joi"
  },
  "main": "index",
  "keywords": [
    "schema",
    "validation"
  ],
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "hoek": "1.x.x"
  },
  "devDependencies": {
    "lab": "1.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/spumko/joi/raw/master/LICENSE"
    }
  ],
  "contributors": [
    {
      "name": "Van Nguyen",
      "email": "the.gol.effect@gmail.com"
    },
    {
      "name": "Eran Hammer",
      "email": "eran@hueniverse.com",
      "url": "http://hueniverse.com"
    },
    {
      "name": "Wyatt Preul",
      "email": "wpreul@gmail.com",
      "url": "http://jsgeek.com"
    }
  ],
  "readme": "<a href=\"https://github.com/spumko\"><img src=\"https://raw.github.com/spumko/spumko/master/images/from.png\" align=\"right\" /></a>\n![joi Logo](https://raw.github.com/spumko/joi/master/images/joi.png)\n\nObject schema description language and validator for JavaScript objects.\n\nCurrent version: **2.0.x**\n\n[![Build Status](https://secure.travis-ci.org/spumko/joi.png)](http://travis-ci.org/spumko/joi)\n\n\n## Table of Contents\n\n<img src=\"https://raw.github.com/spumko/joi/master/images/validation.png\" align=\"right\" />\n- [Example](#example)\n- [Usage](#usage)\n    - [`validate(value, schema, options)`](#validatevalue-schema-options)\n    - [`any()`](#any)\n        - [`any.allow(value)`](#anyallowvalue)\n        - [`any.valid(value)`](#anyvalidvalue)\n        - [`any.invalid(value)`](#anyinvalidvalue)\n        - [`any.required()`](#anyrequired)\n        - [`any.optional()`](#anyoptional)\n        - [`any.with(peer)`](#anywithpeer)\n        - [`any.without(peer)`](#anywithoutpeer)\n        - [`any.xor(peer)`](#anyxorpeer)\n        - [`any.or(peer)`](#anyorpeer)\n        - [`description(desc)`](#descriptiondesc)\n        - [`any.notes(notes)`](#anynotesnotes)\n        - [`any.tags(tags)`](#anytagstags)\n        - [`any.options(options)`](#anyoptionsoptions)\n        - [`any.strict()`](#anystrict)\n        - [`any.rename(to, [options])`](#anyrenameto-options)\n    - [`array()`](#array)\n        - [`array.includes(type)`](#arrayincludestype)\n        - [`array.excludes(type)`](#arrayexcludestype)\n        - [`array.min(limit)`](#arrayminlimit)\n        - [`array.max(limit)`](#arraymaxlimit)\n        - [`array.length(limit)`](#arraylengthlimit)\n    - [`boolean()`](#boolean)\n    - [`date()`](#date)\n        - [`date.min(date)`](#datemindate)\n        - [`date.max(date)`](#datemaxdate)\n    - [`func()`](#func)\n    - [`number()`](#number)\n        - [`number.min(limit)`](#numberminlimit)\n        - [`number.max(limit)`](#numbermaxlimit)\n        - [`number.integer()`](#numberinteger)\n    - [`object(schema)`](#objectschema)\n    - [`string()`](#string)\n        - [`string.insensitive()`](#stringinsensitive)\n        - [`string.min(limit)`](#stringminlimit)\n        - [`string.max(limit)`](#stringmaxlimit)\n        - [`string.length(limit)`](#stringlengthlimit)\n        - [`string.regex(pattern)`](#stringregexpattern)\n        - [`string.alphanum()`](#stringalphanum)\n        - [`string.token()`](#stringtoken)\n        - [`string.email()`](#stringemail)\n- [Migration notes](#migration-notes)\n\n\n# Example\n\n```javascript\nvar Joi = require('joi');\n\nvar schema = {\n    username: Joi.string().alphanum().min(3).max(30).with('birthyear').required(),\n    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/).without('access_token'),\n    access_token: [Joi.string(), Joi.number()],\n    birthyear: Joi.number().integer().min(1900).max(2013),\n    email: Joi.string().email()\n};\n\nvar err = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);  // err === null -> valid\n```\n\nThe above schema defines the following constraints:\n* `username`\n    * a required string\n    * must contain only alphanumeric characters\n    * at least 3 characters long but no more than 30\n    * must be accompanied by `birthyear`\n* `password`\n    * an optional string\n    * must satisfy the custom regex\n    * cannot appear together with `access_token`\n* `access_token`\n    * an optional, unconstrained string or number\n* `birthyear`\n    * an integer between 1900 and 2013\n* `email`\n    * a valid email address string\n\n# Usage\n\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\n\n```javascript\nvar schema = {\n    a: Joi.string()\n};\n```\n\nThen the value is validated against the schema:\n\n```javascript\nvar err = Joi.validate({ a: 'a string' }, schema);\n```\n\nIf the value is valid, `null` is returned, otherwise an `Error` object.\n\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\n\n```javascript\nvar schema = Joi.string().min(10);\n```\n\nIf the schema is a **joi** type, the `schema.validate(value)` can be called directly on the type. When passing a non-type schema object,\nthe module converts it internally to an object() type equivalent to:\n\n```javascript\nvar schema = Joi.object({\n    a: Joi.string()\n});\n```\n\nWhen validating a schema:\n* Keys are optional by default.\n* Strings are utf-8 encoded by default.\n* Rules are defined in an additive fashion and evaluated in order after whitelist and blacklist checks.\n\n### `validate(value, schema, options)`\n\nValidates a value using the given schema and options where:\n- `value` - the value being validated.\n- `schema` - the validation schema. Can be a **joi** type object or a plain object where every key is assigned a **joi** type object.\n- `options` - an optional object with the following optional keys:\n- `abortEarly` - when `true`, stops validation on the first error, otherwise returns all the errors found. Defaults to `true`.\n- `convert` - when `true`, attepmts to cast values to the required types (e.g. a string to a number). Defaults to `true`.\n- `modify` - when `true`, converted values are written back to the provided value (only when value is an object). Defaults to `false`.\n- `allowUnknown` - when `true`, allows object to contain unknown keys which are ignored. Defaults to `false`.\n- `skipFunctions` - when `true`, ignores unknown keys with a function value. Defaults to `false`.\n- `stripUnknown` - when `true`, unknown keys are deleted (only when value is an object). Defaults to `false`.\n- `languagePath` - the location of the language file used to localize error messages. Defaults to `'languages/en-us.json'`.\n\n```javascript\nvar schema = {\n    a: Joi.number()\n};\n\nvar value = {\n    a: '123'\n};\n\nvar err = Joi.validate(value, schema, { modify: true });\n\n// err -> null\n// value.a -> 123 (number, not string)\n```\n\n### `any()`\n\nGenerates a schema object that matches any data type.\n\n```javascript\nvar any = Joi.any();\nany.valid('a');\n\nvar err = any.validate('a');\n```\n\n#### `any.allow(value)`\n\nWhitelists a value where:\n- `value` - the allowed value which can be of any type and will be matched against the validated value before applying any other rules.\n  `value` can be an array of values, or multiple values can be passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.any().allow('a'),\n    b: Joi.any().allow('b', 'B'),\n    c: Joi.any().allow(['c', 'C'])\n};\n```\n\n#### `any.valid(value)`\n\nAdds the provided values into the allowed whitelist and marks them as the only valid values allowed where:\n- `value` - the allowed value which can be of any type and will be matched against the validated value before applying any other rules.\n  `value` can be an array of values, or multiple values can be passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.any().valid('a'),\n    b: Joi.any().valid('b', 'B'),\n    c: Joi.any().valid(['c', 'C'])\n};\n```\n\n#### `any.invalid(value)`\n\nBlacklists a value where:\n- `value` - the forbidden value which can be of any type and will be matched against the validated value before applying any other rules.\n  `value` can be an array of values, or multiple values can be passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.any().invalid('a'),\n    b: Joi.any().invalid('b', 'B'),\n    c: Joi.any().invalid(['c', 'C'])\n};\n```\n\n#### `any.required()`\n\nMarks a key as required which will not allow `undefined` as value. All keys are optional by default.\n\n```javascript\n    var schema = {\n    a: Joi.any().required()\n};\n```\n\n#### `any.optional()`\n\nMarks a key as optional which will allow `undefined` as values. Used to annotate the schema for readability as all keys are optional by default.\n\n```javascript\nvar schema = {\n    a: Joi.any().optional()\n};\n```\n\n#### `any.with(peer)`\n\nRequires the presence of another key whenever this value is present where:\n- `peer` - the required key name that must appear together with the current value. `peer` can be an array of values, or multiple values can be\n  passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.any().with('b'),\n    b: Joi.any()\n};\n```\n\n#### `any.without(peer)`\n\nForbids the presence of another key whenever this value is present where:\n- `peer` - the forbidden key name that must not appear together with the current value. `peer` can be an array of values, or multiple values can be\n  passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.any().without('b'),\n    b: Joi.any()\n};\n```\n\n#### `any.xor(peer)`\n\nDefines an exclusive relationship with another key where this or one of the peers is required but not at the same time where:\n- `peer` - the exclusive key name that must not appear together with the current value but where one of them is required. `peer` can be an array\n  of values, or multiple values can be passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.any().xor('b'),\n    b: Joi.any()\n};\n```\n\n#### `any.or(peer)`\n\nDefines a relationship with another key where this or one of the peers is required (and more than one is allowed) where:\n- `peer` - the key name that must appear if the current value is missing. `peer` can be an array of values, or multiple\n  values can be passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.any().or('b'),\n    b: Joi.any()\n};\n```\n\n#### `description(desc)`\n\nAnnotates the key where:\n- `desc` - the description string.\n\n```javascript\nvar schema = Joi.any().description('this key will match anything you give it');\n```\n\n#### `any.notes(notes)`\n\nAnnotates the key where:\n- `notes` - the notes string or array of strings.\n\n```javascript\nvar schema = Joi.any().notes(['this is special', 'this is important']);\n```\n\n#### `any.tags(tags)`\n\nAnnotates the key where:\n- `tags` - the tag string or array of strings.\n\n```javascript\nvar schema = Joi.any().tags(['api', 'user']);\n```\n\n#### `any.options(options)`\n\nOverrides the global `validate()` options for the current key and any sub-key where:\n- `options` - an object with the same optional keys as [`Joi.validate(value, schema, options)`](#joivalidatevalue-schema-options).\n\n```javascript\nvar schema = {\n    a: Joi.any().options({ modify: true })\n};\n```\n\n#### `any.strict()`\n\nSets the `options.convert` options to `false` which prevent type casting for the current key and any child keys.\n\n```javascript\nvar schema = {\n    a: Joi.any().strict()\n};\n```\n\n#### `any.rename(to, [options])`\n\nRenames a key to another name where:\n- `to` - the new key name.\n- `options` - an optional object with the following optional keys:\n    - `move` - if `true`, deletes the old key name, otherwise both old and new keys are kept. Defaults to `false`.\n    - `multiple` - if `true`, allows renaming multiple keys to the same destination where the last rename wins. Defaults to `false`.\n    - `override` - if `true`, allows renaming a key over an existing key. Defaults to `false`.\n\n### `array()`\n\nGenerates a schema object that matches an array data type.\n\nSupports the following subset of the [`any()`](#any) type:\n- `required()`\n- `optional()`\n- `with(peer)`\n- `without(peer)`\n- `xor(peer)`\n- `description(desc)`\n- `notes(notes)`\n- `tags(tags)`\n- `options(options)`\n- `rename(to, [options])`\n\n```javascript\nvar array = Joi.array();\narray.includes(Joi.string().valid('a', 'b'));\n\nvar err = array.validate(['a', 'b', 'a']);\n```\n\n#### `array.includes(type)`\n\nList the types allowed for the array values where:\n- `type` - a **joi** schema object to validate each array item against. `type` can be an array of values, or multiple values can be passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.array().includes(Joi.string(), Joi.number())\n};\n```\n\n#### `array.excludes(type)`\n\nList the types forbidden for the array values where:\n- `type` - a **joi** schema object to validate each array item against. `type` can be an array of values, or multiple values can be passed as individual arguments.\n\n```javascript\nvar schema = {\n    a: Joi.array().excludes(Joi.object())\n};\n```\n\n#### `array.min(limit)`\n\nSpecifies the minimum number of items in the array where:\n- `limit` - the lowest number of array items allowed.\n\n```javascript\nvar schema = {\n    a: Joi.array().min(2)\n};\n```\n\n#### `array.max(limit)`\n\nSpecifies the maximum number of items in the array where:\n- `limit` - the highest number of array items allowed.\n\n```javascript\nvar schema = {\n    a: Joi.array().max(10)\n};\n```\n\n#### `array.length(limit)`\n\nSpecifies the exact number of items in the array where:\n- `limit` - the number of array items allowed.\n\n```javascript\nvar schema = {\n    a: Joi.array().length(5)\n};\n```\n\n### `boolean()`\n\nGenerates a schema object that matches a boolean data type (as well as the strings 'true', 'false', 'yes', and 'no'). Can also be called via `bool()`.\n\nSupports the same methods of the [`any()`](#any) type.\n\n```javascript\nvar boolean = Joi.boolean();\nboolean.allow(null);\n\nvar err = boolean.validate(true);\n```\n\n### `date()`\n\nGenerates a schema object that matches a date type (as well as a JavaScript date string or number of milliseconds).\n\nSupports the same methods of the [`any()`](#any) type.\n\n```javascript\nvar date = Joi.date();\ndate.min('12-20-2012');\n\nvar err = date.validate('12-21-2012');\n```\n\n#### `date.min(date)`\n\nSpecifies the oldest date allowed where:\n- `date` - the oldest date allowed.\n\n```javascript\nvar schema = {\n    a: Joi.date().min('1-1-1974')\n};\n```\n\n#### `date.max(date)`\n\nSpecifies the latest date allowed where:\n- `date` - the latest date allowed.\n\n```javascript\nvar schema = {\n    a: Joi.date().max('12-31-2020')\n};\n```\n\n### `func()`\n\nGenerates a schema object that matches a function type.\n\nSupports the same methods of the [`any()`](#any) type.\n\n```javascript\nvar func = Joi.func();\nfunc.allow(null);\n\nvar err = func.validate(function () {});\n```\n\n### `number()`\n\nGenerates a schema object that matches a number data type (as well as strings that can be converted to numbers).\n\nSupports the same methods of the [`any()`](#any) type.\n\n```javascript\nvar number = Joi.number();\nnumber.min(1).max(10).integer();\n\nvar err = number.validate(5);\n```\n\n#### `number.min(limit)`\n\nSpecifies the minimum value where:\n- `limit` - the minimum value allowed.\n\n```javascript\nvar schema = {\n    a: Joi.number().min(2)\n};\n```\n\n#### `number.max(limit)`\n\nSpecifies the maximum value where:\n- `limit` - the maximum value allowed.\n\n```javascript\nvar schema = {\n    a: Joi.number().max(10)\n};\n```\n\n#### `number.integer()`\n\nRequires the number to be an integer (no floating point).\n\n```javascript\nvar schema = {\n    a: Joi.number().integer()\n};\n```\n\n### `object(schema)`\n\nGenerates a schema object that matches an object data type (as well as JSON strings that parsed into objects) where:\n- `schema` - optional object where each key is assinged a **joi** type object. If the schema is `{}` no keys allowed.\n  Defaults to 'undefined' which allows any child key.\n\nSupports the same methods of the [`any()`](#any) type.\n\n```javascript\nvar object = Joi.object({\n    a: number.min(1).max(10).integer()\n});\n\nvar err = object.validate({ a: 5 });\n```\n\n### `string()`\n\nGenerates a schema object that matches a string data type. Note that empty strings are not allowed by default and must be enabled with `allow('')`.\n\nSupports the same methods of the [`any()`](#any) type.\n\n```javascript\nvar string = Joi.string();\nstring.min(1).max(10);\n\nvar err = string.validate('12345');\n```\n\n#### `string.insensitive()`\n\nAllows the value to match any whitelist of blacklist item in a case insensitive comparison.\n\n```javascript\nvar schema = {\n    a: Joi.string().valid('a').insensitive()\n};\n```\n\n#### `string.min(limit)`\n\nSpecifies the minimum number string characters where:\n- `limit` - the minimum number of string characters required.\n\n```javascript\nvar schema = {\n    a: Joi.string().min(2)\n};\n```\n\n#### `string.max(limit)`\n\nSpecifies the maximum number of string characters where:\n- `limit` - the maximum number of string characters allowed.\n\n```javascript\nvar schema = {\n    a: Joi.string().max(10)\n};\n```\n\n#### `string.length(limit)`\n\nSpecifies the exact string length required where:\n- `limit` - the required string length.\n\n```javascript\nvar schema = {\n    a: Joi.string().length(5)\n};\n```\n\n#### `string.regex(pattern)`\n\nDefines a regular expression rule where:\n- `pattern` - a regular expression object the string value must match against.\n\n```javascript\nvar schema = {\n    a: Joi.string().regex(/^[abc]+$/)\n};\n```\n\n#### `string.alphanum()`\n\nRequires the string value to only contain a-z, A-Z, and 0-9.\n\n```javascript\nvar schema = {\n    a: Joi.string().alphanum()\n};\n```\n\n#### `string.token()`\n\nRequires the string value to only contain a-z, A-Z, 0-9, and underscore _.\n\n```javascript\nvar schema = {\n    a: Joi.string().token()\n};\n```\n\n#### `string.email()`\n\nRequires the string value to be a valid email address.\n\n```javascript\nvar schema = {\n    a: Joi.string().email()\n};\n```\n\n#### `string.guid()`\n\nRequires the string value to be a valid GUID.\n\n```javascript\nvar schema = {\n    a: Joi.string().guid()\n};\n```\n\n#### `string.isoDate()`\n\nRequires the string value to be in valid ISO 8601 date format.\n\n```javascript\nvar schema = {\n    a: Joi.string().isoDate()\n};\n```\n\n# Migration notes\n\n**joi** 2.0 is a complete rewrite of the previous version. While largely backward compatible, it includes a few changes that are\nnot as well as a large number of bug fixes that dramatically changes existing behavior. The following is an incomplete list of changes.\nPlease test your existing validation rules to ensure they behave as expected with this new version.\n\n* `Joi.types` and `Joi.Types` deprecated - use `Joi.string()` etc. instead.\n* Uppercase type names deprecated - use lowercase function names instead.\n* Top level global config options no longer supported (e.g. `{ languagePath: './file.json' }`). Use the `.options()` method instead.\n* `noShortCircuit()` no longer supported - use the `abortEarly` option instead.\n* Options renamed:\n    * `saveConversions` changed to `modify`.\n    * `skipConversions` changed to `convert` (with reversed meaning).\n    * `stripExtraKeys` changed to `stripUnknown`.\n    * `allowExtraKeys` changed to `allowUnknown`.\n    * In `rename()` options:\n        * `deleteOrig` changed to `move`.\n        * `allowMult` changed to `multiple`.\n        * `allowOverwrite` changed to `override`.\n* `nullOk()` and `emptyOk()` are deprecated - use `allow(null)` and `allow('')` instead.\n* `number().float()` no longer supported.\n* Completely new internal representation of the data. If you were accessing _variables, your code is most likely broken now. Use `describe()` instead.\n* `string().alphanum()` no longer allows spaces and underscores and does not take an arguement.\n* `string().date()` no longer supported - use new `date()` type.\n* `deny()` deprecated - use `invalid()` instead.\n* `array().includes()` and `array.excludes()` now validates correctly (not just the base type).\n* `allow()`, `valid()`, and `invalid()` values are now compared against the original and converted values (not just after conversion).\n* `string().min()` no longer implies `required()`.\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spumko/joi/issues"
  },
  "homepage": "https://github.com/spumko/joi",
  "_id": "joi@2.3.1",
  "_from": "joi@2.x.x"
}
