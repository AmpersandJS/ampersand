{
  "name": "insert-module-globals",
  "version": "1.1.2",
  "description": "insert implicit module globals into a module-deps stream",
  "main": "index.js",
  "bin": {
    "insert-module-globals": "bin/cmd.js"
  },
  "dependencies": {
    "commondir": "~0.0.1",
    "lexical-scope": "~0.0.5",
    "process": "~0.5.1",
    "through": "~2.2.0",
    "duplexer": "~0.0.3",
    "JSONStream": "~0.4.3"
  },
  "devDependencies": {
    "tap": "~0.4.0",
    "browser-pack": "~0.2.0",
    "buffer-browserify": "~0.0.5",
    "module-deps": "~0.2.0",
    "browserify": "~2.5.1"
  },
  "scripts": {
    "test": "tap test/*.js",
    "prepublish": "./bundle.sh"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/insert-module-globals.git"
  },
  "homepage": "https://github.com/substack/insert-module-globals",
  "keywords": [
    "__filename",
    "__dirname",
    "global",
    "process",
    "module-deps",
    "browser-pack",
    "browserify"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# insert-module-globals\n\ninsert implicit module globals\n(`__filename`, `__dirname`, `process`, `global`, and `Buffer`)\ninto a module bundle stream generated by\n[module-deps](https://github.com/substack/module-deps)\n\n[![build status](https://secure.travis-ci.org/substack/insert-module-globals.png)](http://travis-ci.org/substack/insert-module-globals)\n\n# example\n\n``` js\nvar mdeps = require('module-deps');\nvar bpack = require('browser-pack');\nvar insert = require('insert-module-globals');\n\nvar files = [ __dirname + '/files/main.js' ];\nmdeps(files)\n    .pipe(insert(files))\n    .pipe(bpack({ raw: true }))\n    .pipe(process.stdout)\n;\n```\n\n```\n$ node example/insert.js | node\nin main.js: {\"__filename\":\"/main.js\",\"__dirname\":\"/\"}\nin foo/index.js: {\"__filename\":\"/foo/index.js\",\"__dirname\":\"/foo\"}\n```\n\nor use the command-line scripts:\n\n```\n$ module-deps main.js | insert-module-globals main.js | browser-pack | node\nin main.js: {\"__filename\":\"/main.js\",\"__dirname\":\"/\"}\nin foo/index.js: {\"__filename\":\"/foo/index.js\",\"__dirname\":\"/foo\"}\n```\n\n# methods\n\n``` js\nvar insertGlobals = require('insert-module-globals')\n```\n\n## var insert = insertGlobals(files, opts)\n\nInsert globals for an array of entry `files`. The `files` array is used to\nrebase the `__filename` and `__dirname` names or you can pass in an\n`opts.basedir` explicitly.\n\nYou can pass in a custom `opts.resolve(id, parent, cb)` function. By default\n[browser-resolve](https://github.com/shtylman/node-browser-resolve) is used for\nthe `opts.resolve`.\n\nWhen `opts.always` is truthy, wrap every file with all the global variables\nwithout parsing. This is handy because parsing the scope can take a long time,\nso you can prioritize fast builds over saving bytes in the final output.\n\nReturn a through stream `insert` that expects input from the format written by\n[module-deps](https://github.com/substack/module-deps). The `insert` stream will\noutput data that can be fed into\n[browser-pack](https://github.com/substack/browser-pack).\n\n# usage\n\n```\nusage: insert-module-globals [files]\n```\n\n# install\n\nWith [npm](https://npmjs.org), to get the library do:\n\n```\nnpm install insert-module-globals\n```\n\nand to get the bin script do:\n\n```\nnpm install -g insert-module-globals\n```\n\n# insert custom globals.\n\n`insert-module-globals` can also insert arbitary globals into files.\nPass in an object of functions as the `vars` option.\n\n``` js\nvar vars = {\n    process: function (row, basedir) {\n        return {\n            id: \"path/to/custom_process.js\",\n            source: customProcessContent\n        }\n    },\n    Buffer: function (row, basedir) {\n        return {\n            id: \"path/to/custom_buffer.js,\n            source: customProcessContent,\n            //suffix is optional\n            //it's used to extract the value from the module.\n            //it becomes: require(...).Buffer in this case.\n            suffix: '.Buffer'\n        }\n    },\n    Math: function () {\n        //if you return a string,\n        //it's simply set as the value.\n        return '{}'\n        //^ any attempt to use Math[x] will throw!\n    }\n}\n\nmdeps(files)\n    .pipe(insert(files, {vars: vars}))\n    .pipe(bpack({ raw: true }))\n    .pipe(process.stdout)\n```\n\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/insert-module-globals/issues"
  },
  "_id": "insert-module-globals@1.1.2",
  "_from": "insert-module-globals@~1.1.0"
}
