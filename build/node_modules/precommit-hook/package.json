{
  "author": {
    "name": "Nathan LaFreniere",
    "email": "quitlahok@gmail.com",
    "url": "https://github.com/nlf"
  },
  "name": "precommit-hook",
  "description": "A useful pre-commit hook for git based projects that lints and runs npm test",
  "version": "0.3.8",
  "homepage": "https://github.com/nlf/precommit-hook",
  "repository": {
    "url": "https://github.com/nlf/precommit-hook.git"
  },
  "scripts": {
    "install": "node install.js"
  },
  "dependencies": {
    "jshint": "~2.1.4",
    "coffeelint": "~0.5.4"
  },
  "readme": "What is it?\n-----------\n\nThis module is a handy little tool that I wrote to help enforce code quality in node.js projects. It will run the JSHint linter over your code,\nfollowed by two optional steps: A custom validator specified by you in your package.json, and unit tests which are also specified in your package.json.\n\nTo facilitate the usage of JSHint, as part of the install step two files will be created in the root of your project, .jshintrc and .jshintignore. These\nfiles are configuration for JSHint itself. They are included to provide some sane defaults, such as making sure your installed npm modules are not being\nlinted, and that some node.js global variables won't trigger errors. You are free to customize these files after they're created, and they will not be\noverwritten.\n\nWhy should I use it?\n--------------------\n\nNo one likes a messy code base. When working on a team, it becomes more and more difficult to make sure that your project's code stays consistent\nand error free. Since the hook lints all of the project's code, based on your configuration, you can be sure that at the very least standards are\nbeing followed.\n\nIn addition to this, the validate script can be used to perform whatever manual checking you like. Whether it's making sure that a file has been\nupdated, pre-compiling static assets, or whatever other need you may have. Additional steps are easy to forget, so why chance it?\n\nUnit tests are another thing that should always be verified before committing your code. Pushing code that breaks tests is an all too common occurrence.\n\nHaving a tool that automates all of these steps has been priceless for us, and has very much improved the quality of our code.\n\nPackage.json\n------------\n\nAs mentioned above, there are two optional steps run by the hook. A validator, and unit tests. Specifying these scripts is done in your package.json, such\nas the below example.\n\n```javascript\n{\n  \"name\": \"your_project\",\n  \"description\": \"just an example\",\n  \"scripts\": {\n    \"validate\": \"./command/to/run\",\n    \"test\": \"./other/command\"\n  }\n}\n```\n\nThe contents of the validate and test properties are the shell command to be run to perform those functions. Having these specified in your package.json also\nlends you the ability to be able to run them manually like so\n\n```\nnpm run-script validate\nnpm test\n```\n\nThese scripts can be any shell executable commands, but must exit with a status code of 0 for success and 1 or greater for failure.\n\nIn addition to this, a new feature is the ability to manually override these commands or disable them entirely. To do so you add a precommit config to your\npackage.json, similar to the below example.\n\n```javascript\n{\n  \"name\": \"your_project\",\n  \"description\": \"just an example\",\n  \"scripts\": {\n    \"validate\": \"./command/to/run\",\n    \"test\": \"./other/command\"\n  },\n  \"config\": {\n    \"precommit\": {\n      \"lint\": false,\n      \"validate\": true,\n      \"test\": \"mocha\"\n    }\n  }\n}\n```\n\nThis example would disable the linting step entirely, explicitly enables the validation step, and overrides the test step to run \"mocha\" instead of \"./other/command\"\n\nUsage\n-----\n\n    npm install precommit-hook\n\n\nEverything else is automatic! The npm install script will create the hook, and place a .jshintrc and .jshintignore file in your project if they don't exist.\nTo update, just install again. Only the hook itself will be overwritten. I recommend putting precommit-hook in your project's devDependencies to make sure\nthat anyone who may be contributing to your project will have the hook installed.\n\n```\n{\n  \"name\": \"your_project\",\n  \"description\": \"just an example\",\n  \"scripts\": {\n    \"validate\": \"./command/to/run\",\n    \"test\": \"./other/command\"\n  },\n  \"devDependencies\": {\n    \"precommit-hook\": \"\"\n  }\n}\n```\n\nContact\n-------\n\nLike the project? Hate it? Just want to say hi? Find me on twitter [@quitlahok](http://twitter.com/quitlahok)\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nlf/precommit-hook/issues"
  },
  "_id": "precommit-hook@0.3.8",
  "dist": {
    "shasum": "31cbf67b207171fb97d5459d785221f4cba844d2"
  },
  "_from": "precommit-hook@0.3.8",
  "_resolved": "http://registry.npmjs.org/precommit-hook/-/precommit-hook-0.3.8.tgz"
}
