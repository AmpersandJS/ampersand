#!/usr/bin/env node
var exec = require('child_process').exec;
var cwd = process.cwd();
var fail = '\x1B[31mfailed!\x1B[39m';
var ok = '\x1B[32mok\x1B[39m';
var notfound = '\x1B[33mn/a\x1B[39m (no script found)';
var exists = require('fs').existsSync;

function getRoot() {
    exec('git rev-parse --show-toplevel', function (err, stderr, stdout) {
        if (err) {
            console.log('failed to find git root');
            process.exit(1);
        }
        var path = stderr.trim(),
            config = require(path + '/package.json'),
            myconfig = config.config && config.config.precommit ? config.config.precommit : undefined;
        runJshint(stdout, config, myconfig);
    });
}

function runJshint(path, config, myconfig) {
    var cmd;
    if (myconfig && myconfig.hasOwnProperty('lint')) {
        if (myconfig.lint && myconfig.lint !== true) {
            cmd = myconfig.lint;
        } else if (myconfig.lint === false) {
            return runValidator(path, config, myconfig);
        }
    }
    if (!cmd) {
        if (exists('./node_modules/precommit-hook/node_modules/.bin/jshint')) {
            cmd = './node_modules/precommit-hook/node_modules/.bin/jshint .';
        } else if (exists('./node_modules/.bin/jshint')) {
            cmd = './node_modules/.bin/jshint .';
        } else {
            console.log('jshint: ' + notfound);
            return runValidator(path, config, myconfig);
        }
    }
    exec(cmd, { cwd: path }, function (err, stdout, stderr) {
        if (err) {
            console.log('jshint: ' + fail);
            console.log(stdout);
            console.log(stderr);
            process.exit(1);
        } else {
            console.log('jshint: ' + ok);
            runValidator(path, config, myconfig);
        }
    });
}

function runValidator(path, config, myconfig) {
    var cmd;
    if (myconfig && myconfig.hasOwnProperty('validate')) {
        if (myconfig.validate && myconfig.validate !== true) {
            cmd = myconfig.validate;
        } else if (myconfig.validate === false) {
            return runTests(path, config, myconfig);
        }
    }
    if (!cmd && config.scripts && config.scripts.validate) cmd = config.scripts.validate;
    if (cmd) {
        exec(cmd, { cwd: path }, function (err, stdout, stderr) {
            if (err) {
                console.log('validation: ' + fail);
                console.log(stdout);
                console.log(stderr);
                process.exit(1);
            } else {
                console.log('validation: ' + ok);
                runTests(path, config, myconfig);
            }
        });
    } else {
        console.log('validation: ' + notfound);
        runTests(path, config, myconfig);
    }
}

function runTests(path, config, myconfig) {
    var cmd;
    if (myconfig && myconfig.hasOwnProperty('test')) {
        if (myconfig.test && myconfig.test !== true) {
            cmd = myconfig.test;
        } else if (myconfig.test === false) {
            return process.exit(0);
        }
    }
    if (!cmd && config.scripts && config.scripts.test) cmd = config.scripts.test;
    if (cmd) {
        exec(cmd, { cwd: path }, function (err, stdout, stderr) {
            if (err) {
                console.log('tests: ' + fail);
                console.log(stdout);
                console.log(stderr);
                process.exit(1);
            } else {
                console.log('tests: ' + ok);
                process.exit(0);
            }
        });
    } else {
        console.log('tests: ' + notfound);
        process.exit(0);
    }
}

console.log('running pre-commit checks...');
getRoot();
