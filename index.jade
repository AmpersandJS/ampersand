doctype
html
    head
        link(type="text/css", rel="stylesheet", href="docs/main.css")
        link(type="text/css", rel="stylesheet", href="docs/&yet-highlight.css")
        title humanjavascript docs
        script.
          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
          ga('create', 'UA-44685415-1', 'humanjavascript.com');
          ga('send', 'pageview');
    body
      nav
        .warning
          strong WARNING: 
          p these docs are incomplete and still being written. <a href="http://github.com/henrikjoreteg/humanjs">help make them better</a>
        
        #slider 

      main
        h1.humanjs HumanJS

        h2 Quick Start

        ol
          li <a href="http://nodejs.org/">install node.js</a>
          li install humanjs
            p
              code $ npm install humanjs -g
          li run ``humanjs`` to create your new app folder, build your project scaffolding, and run your app.
            p
              code $ humanjs
          li open your browser to: <code>http://localhost:3000</code>

          li that's it!

        h3 What's included?

        ul
          li Well-architected shell of a single page app to serve as a starting point for your app.
          li A solution for using jade templates and templatizer to pre-compile client templates.
          li A fully functional development environment that will watch for changes. You just modify and refresh (without manual build steps).
          li Changing one flag in your config puts it in production mode which builds and serves minfied, uniquely named, and permanently cachable static files.
          li A clientside routing system using HTML5 pushState.
          li A main layout template is rendered by the main view that includes a page container where page views are rendered as the user navigates to different URLs in the app.
          li An example of rendering a collection of models in a container.
          li A mock REST API to demonstrate how you might talk to an API to fetch data.
          li A solution for declaritive binding of model properties to views, that is <em>completely</em> decoupled from the template engine. See human-view below for more details.
          li A solution for creating readable, type-checked, and very explicitly defined models. This is hugely important in team enviroments where you need somewhere to reference what is being stored on your models. See human-model for more detail.


        h2 Introduction

        p There are lots of toolkits for building single page apps or "Native HTML5 Apps" if you will. It seems they're either too generic and unopinionated or too tightly coupled or require a lot of knowledge and understanding of the framework. After having built lots of single page apps with various tools at <a href="http://andyet.com">&yet</a> we've surmised that the ideal seems to lie somewhere in the middle. 

        p Ultimately we'd like something that is comprised of lots of independent little tools that each to one thing (see <a href="http://www.faqs.org/docs/artu/ch01s06.html">Unix philosophy</a>).

        p That said, starting with a group of completely unassembled little pieces is inefficient because there are lots of patterns common to <em>most</em> apps. So we need an opinionated starting point.

        p That's how HumanJS was born. Some of it simply uses <a href="http://backbonejs.org">Backbone.js</a> as is.

        p It's not really a framework, it's a bag of pre-assembled little tools that you're free to rip apart and add to. 

        h3 Goals

        ul
            li Readability
            li Flexibility
            li Minimal magic
            li 100% client rendered
            li Use node.js to simplify develpment
            li App can be served as static content by any server (node.js not required in production)
            li Should requrie minimal framework-level knowledge (knowing javascript well gets you 95% there)
            li Easy to collaborate on:
              ul 
                li Clear file structure where everything has a logical place.
                li Proper seperation of concerns
            li Provide an opinionated starting point
            li Use npm + browserify for package management but still play nicely with non-common JS libraries.
        

        h3 downloads

        ol
          li humanjs (scaffolding / docs) <a href="https://github.com/henrikjoreteg/humanjs">github</a> <a href="https://npmjs.org/package/humanjs">npm</a>
          li human-model <a href="https://github.com/henrikjoreteg/human-model">github</a> <a href="https://npmjs.org/package/human-model">npm</a>
          li human-view <a href="https://github.com/henrikjoreteg/human-view">github</a> <a href="https://npmjs.org/package/human-view">npm</a>
          li backbone.js <a href="https://github.com/jashkenas/backbone">github</a> <a href="https://npmjs.org/package/backbone">npm</a>

        h2(data-nav= "The Book") Human JavaScript book

        p A 100+ page e-book providing additional context, explanations and philosophy behind the tools documented here <a href="http://humanjavascript.com">is available for $29</a>.

        p 
          a(href="http://humanjavascript.com")
            img(src="/docs/images/human-javascript.png", width="200", alt="human javascript ebook")

        h2(data-nav= "human-model") human-model <small><a href="https://github.com/henrikjoreteg/human-model">github.com/henrikjoreteg/human-model</a></small>

        p Models are the core of app because they are responsible for storing all the application's state. Very likely if you're looking at the DOM to determine the state of application that state information that you should consider storing as a property on a model instead.

        p Since models play such a central role in a single-page app they should really serve as documentation for how the app is structured. We want to be able to look at code for a Model and know exactly what type of data is stores. This is hugely important for enabling teams to work on the same app together.

        h3 Types of state

        p Take for instance a <code>selected</code> property on a model. That's likely something you would use to represent current UI state for the current browser session but not something you'd want to save back to the API when calling a model's <code>.save()</code> method. So there really are two types of state. It's challenging to make that type of distinction with Backbone. 

        p HumanModel supports three types of state that will get stored on a model: 
          ul
            li <strong>properties</strong>: State that comes from (and will be sent back to) our API and represents the data persisted on the server.
            li <strong>session properties</strong>: State that represents current browser session state. 
            li <strong>derived properties</strong>: These are read-only psuedo properties that are usually derived from properties or session properties. These are generally created for convenince or as a means to let you cache a computed result (read more below).

        p In human model you have to classify all your properties as either <code>prop</code> or a <code>session</code>. That includes declaring your <code>id</code> property. How HumanModel handles properties that you have not pre-defined is determined by its <code>extraProperties</code> setting. But, by default properties that are <code>.set()</code> on a model that you have not defined are simply ignored.

        h3(data-nav="model relationships") Handling model relationships

        p From our experience, <code>derived</code> properties work really well for handling relationships between models. Let's say you've got a model representing people and model representing a group of people. Often your API for fetching people would include something like a <code>groupID</code> as a property for each person you retrieve.

        h3(data-nav= "comparing w/ backbone") comparing with Backbone.Model

        p If you're familiar with Backbone.js, HumanModel is a Backbone-compatible alternative to Models. 

        p The key differences are as follows:

        ol 
          li There is no <code>extend</code> it's called <code>define</code> instead because it's doing something fundamentally different than what Backbone does with <code>extend</code>. Backbone's <code>extend</code> is simply extending a Backbone Model's prototype directly. Whereas Human Model's <code>define</code> is a way of describing a set of properties that will be used to generate a prototype with getters and setters that store the types of values you describe in your definition. However, you can still use it very similarly because any methods you pass as part of your definition are attached to the prototype.


        h3(data-nav= "define") define <code>HumanModel.define()</code>

        p The <code>define</code> method returns a constructor that can be used to generate instances of your model. 

        p It takes a single object that describes model's properties (<code>props</code>), session properties (<code>session</code>), derived properties (<code>derived</code>) and any methods you'd like to attach to the model's prototype. These special property descriptions are exaplained individually below.

        h4(data-nav= "props") props <code>props: {}</code>

        p Schema definitions take an attribute called <code>props</code> to define properties.

        p These property definitions can be described three different ways depending on your needs:

        p Just a string that identifies the type:
        
        pre.
          props: {
            firstName: 'string'
          }

        p An array of positional descriptors:

        pre.
          // these follow the format [type (string), required (boolean), default value];
          props: {
            firstName: ['string', true, 'user']
          }

        p You can also just supply an object if you want to be more explicit:

        pre.
          props: {
            firstName: {
              type: 'string',
              required: true,
              default: 'user'
            }
          }

        p You can mix and match these as you wish. For example all the following are valid:

        pre.
          props: {
            active: 'boolean',
            firstName: ['string', false, 'joe'],
            lastName: {
              type: 'string',
              default: 'user',
              requred: true
            },
            isAwesome: ['boolean', true] // you don't have to provide a default
          }

        p types can be: <code>string</code>, <code>number</code>, <code>boolean</code>, <code>array</code>, <code>object</code>, or <code>date</code>
        
        h4(data-nav= "session") session <code>session: {}</code> 

        p Session properties are defined the <em>exact</em> same way as <code>props</code>. However, they won't be included in any server calls such as calling <code>save()</code>.
        
        h4(data-nav= "derived") derived <code>derived: {}</code> 

        p The classic example of a derived property would be creating a <code>fullName</code> property that combined <code>firstName</code> and <code>lastName</code>. Why would we want this? Well, it means we can listen for a <code>change:fullName</code> event, or bind <code>fullName</code> to something in our HTML as if it were a normal property.

        p The other big benefit of derived properties is that we can (optionally) specify which properties they depend on or choose to cache the results. This is useful for optimizing performance of things that may be more computationally intensive and only re-calculating those values if any of the properties it depends on change.

        p In addition, the are also ideal for handling relationships between other models you have on the client. Your server API may return an <code>id</code> of a related model as part of the results. For example let's assume we've got a user model that includes a <code>groupId</code> property from our API and a Groups collection that contains Group models in our app. We can create a derived property on our user model called <code>group</code> that looks up and returns the correct group from our global model registry.

        p Derived properties are defined as follows:

        pre.

          var Person = HumanModel.define({
            props: {
              firstName: 'string',
              lastName: 'string'
            },
            derived: {
              fullName: {
                deps: ['firstName', 'lastName'],
                cache: true,
                fn: function () {
                  return this.firstName + ' ' + this.lastName;
                }
              }
            }
          });

        h5 <code>fn</code> (required, function)

        p This is the actual function that will called when you access the derived property. Within this function <code>this</code> is the current model instance.

        h5 <code>deps</code> (optional, array)

        p Properties that our derived property is dependent on. When these change we also get a <code>change:fullName</code> event. If no <code>deps</code> are specified you will never get a change event for the derived property.

        h5 <code>cache</code> (optional, boolean, default: false)

        p If <code>cache: true</code> the property will be computed and cached on first access. The cached value is cleared if any of the <code>deps</code> properties change and will only be recomputed next time it's accessed. 
        
        p If <code>cache: false</code> the property is recomputed each time it's accessed.

        h4(data-nav= "type") type <code>model.type</code>

        p Giving a model a string <code>type</code> property makes it easy to find models of that type in the global registry and provides an easy way for you to identify the type of model you're dealing with in code. This is not required, but recommended.

        p For example:

        pre.
          var HumanModel = require('human-model');
          
          module.exports = HumanModel.define({
            type: 'widget',
            props: {
              name: 'string'
            }
          });
        
        h4(data-nav= "initialize") initialize <code>model.initialize()</code>
        
        p This is a no-op by default. It is called as part of the model's constructor. If defined it will be passed the same arguments that were passed to the constructor.


        h2(data-nav= "human-view") human-view <small><a href="https://github.com/henrikjoreteg/human-view">github.com/henrikjoreteg/human-view</a></small>

        h3 el
        
        h3 initialize
        
        h3 render
        
        h3 renderAndBind
        p
          | This is a convenience method which will render the template and fully replace the root element with the rendered template content.
        p
          | Either define a <code>template</code> property in your view, or pass in a template directly. The template can either be a function or a string. If the template is a function, it will be passed the <code>context</code> argument.
          
        h3 renderCollection
        p
          | human-view includes a <code>renderCollection</code> method that works as follows:

        pre.
          // some view for individual items in the collection
          var ItemView = StrictView.extend({ ... });

          // the main view
          var MainView = StrictView.extend({
              template: '<section class="page"><ul class="itemContainer"></ul></section>',
              render: function (opts) {
                  // render our template as usual
                  this.renderAndBind();
                  
                  // call renderCollection with these arguments:
                  // 1. collection
                  // 2. which view to use for each item in the list
                  // 3. which element within this view to use as the container
                  // 4. options object (not required):
                  //      {
                  //          // function used to determine if model should be included
                  //          filter: function (model) {},
                  //          // boolean to specify reverse rendering order
                  //          reverse: false,
                  //          // view options object (just gets passed to item view's `initialize` method)
                  //          viewOptions: {}
                  //      }
                  this.renderCollection(this.collection, ItemView, this.$('.itemContainer')[0], opts);
                  return this;
              }  
          })

        p
          | The <code>renderCollection()</code> call will maintain the collection within the <code>.itemContainer</code> element, including proper handling of add, remove, sort, reset, etc. You can optionally specify a filter function or choose to reverse the collection when rendering.
        
        h4 listenToAndRun

        p 
          | The same as Backbone's <code>listenTo()</code>, except it will call handler immediately after applying the listener.

        h3 bindings
        p
          | Bindings are view-level objects that map model properties to specific DOM selectors in the view's template. Once bindings are declared, human-view will automatically update the appropriate DOM elements or attributes when the bound model property changes.
        

        h4 textBindings
        p
          | Text bindings are used to directly bind the inner text of an element to the model.
        
        pre.
            textBindings: {
                liveStreamCount: '.live-stream-count'
            } 
            ...
            <div class='.live-stream-count'>0</div>
          
        p
          | Here, the contents of the <code>.liveStreamCount</code> element (or elements) within the view will be replaced with and bound to the value retrived by <code>model.get('liveStreamCount')</code>.
        

        h4 srcBindings
        p
          | Source bindings are used to bind the <code>src</code> attribute of a DOM element to the model.
        
        pre.
            srcBindings: {
                userProfilePic: 'img .profile-pic'
            }
            ...
            <img class='profile-pic' src='' alt='Profile Picture' />
          
        p
          | Here, the <code>src</code> tag of the <code>.profile-pic</code> image element will be bound to <code>model.get('userProfilePic')</code>.
        

        h4 hrefBindings
        p
          | You're probably getting the idea by now, but href bindings are just like the src bindings, but for the <code>href</code> attribute.
        
        pre.
            hrefBindings: {
                logoutURL: 'a .logout'
            }
            ...
            <a class='logout' href=''>Logout</a>
          
        p
          | Here, the <code>href</code> tag of the <code>.logout</code> anchor element will be bound to <code>model.get('logoutURL')</code>.
        

        h4 classBindings
        p
          | Class bindings are a bit special. They maintain a class on the element according to the following rules:
        ol
          li
            strong If the bound property is a boolean
            | : the name of the property will be used as the name of the class. The class will be present on the element when the boolean is <code>true</code>, and removed when the propety is <code>false</code>.

            pre.
              // within your view definition
              classBindings: {
                  active: 'a .options-page'
              }
              ...
              <a class='options-page' href=''>Options</a>
              

              // some other code
              model.set('active', true); // element with have `active` class
              model.set('active', false); // `active` class will be removed (if present)

          
        ol
          li
            strong If the property is a string
            | : the current value of the property will be used as the class name. When the property value changes the previous class will be removed and be replaced by the current value. No other classes on that element will be disturbed.

            pre.
              // within your view definition
              classBindings: {
                  status: 'a .options-page'
              }
              ...
              <a class='options-page' href=''>Options</a>
              

              // some other code
              model.set('status', 'available'); // element with have an `available` class 
              model.set('status', 'away'); // `available` class will be removed and `away` class added.  

        h2 router

        p HumanJS just uses Backbone's router so just <a href="http://backbonejs.org/#Router">see backbone's router docs for more info</a>.


        h2(data-nav= "moonboots") moonboots <small><a href="https://github.com/henrikjoreteg/moonboots">github.com/henrikjoreteg/moonboots</a></small>

        p Moonboots is a tool to help you intelligently deal with different goals of serving JS during development and in production.

        p In development we explicitly don't want to cache or minify our JS and CSS files while working. We want to organize our modules in a way that makes the most sense for us as we're building the app.

        p In production, we want to use the exact same source code structure to generate a single minified, uniquely named file for the JS and the CSS so we can tell the browser to cache those permanently. If we do our job correctly when serving those files, our main application code will be downloaded once per revision of the app.

        p Moonboots aims to solve this problem. You structure your entire application in the same way that you would in node with Common JS modules requiring each other. It uses browserify under the hood to do all that magic. But then you just configure your client application like so: 

        h3 moonboots + express.js

        p The full documentation for moonboots is <a href="https://github.com/henrikjoreteg/moonboots#readme">available in the moonboots repo</a>. 

        p For a preview, here's how we'd configure a clientside moonboots app to be served by express:

        pre.
          var express = require('express'),
              Moonboots = require('moonboots'),
              app = express();

          // configure our app
          var clientApp = new Moonboots({
              main: __dirname + '/sample/app/app.js',
              developmentMode: false,
              libraries: [
                  __dirname + '/sample/libraries/jquery.js'
              ],
              stylesheets: [
                  __dirname + '/styles.css'
              ],
              server: app
          });

          // We also just need to specify the routes at which we want to serve this clientside app.
          // This is important for supporting "deep linking" into a single page app. The server
          // has to know what urls to let the browser app handle.
          app.get('*', clientApp.html());

          // start listening for http requests
          app.listen(3000);

        h3 moonboots + hapi

        p If you're using hapi, there's <a href="https://github.com/wraithgar/moonboots-hapi">a version of moonboots that is structured as a hapi plugin</a>. 

        h2 Finding modules

        p There's a site containing a curated list of npm-installable modules with a quick filter box: <a href="http://resources.humanjavascript.com">humanjs-resources</a> that should help you find things you may need. 

        p Also, there are lots of modules you can find via <a href="http://browserify.org/search">browserify's module search</a>.

        h2 Examples

        h3 And Bang

        p And Bang helps same-page-ify your team with shared tasks and chat. 

        p Many of the tools and approaches of human javascript were extracted from And Bang.

        a(href="http://andbang.com")
          img.exampleImage(src="https://i.cloudup.com/p3kLPyMYDw-2000x2000.png", width="400")

        h3 Talky

        p Talky is truly simple video chat and screen sharing app for groups.

        p Powered by WebRTC and built on human javascript.

        a(href="https://talky.io")
          img.exampleImage(src="https://i.cloudup.com/0c5WD7hIUb-2000x2000.png", width="400")

        h3 The resources app

        p Quick module search of curated modules. The source for this app is <a href="https://github.com/henrikjoreteg/humanjs-resources">available on github</a>.

        a(href="http://resources.humanjavascript.com")
          img.exampleImage(src="https://i.cloudup.com/XhYHvX7FA5-2000x2000.png", width="400")

        h3 Otalk

        p Otalk is an open source chat client powered XMPP, stanza.io, and WebRTC. You can think of it as an open source alternative to Skype.

        a(href="https://otalk.im")
          img.exampleImage(src="https://i.cloudup.com/u0xhQors8G-2000x2000.png", width="400")

        h2 Contributors

        p Human JavaScript is the combined efforts of lots of people and since all these projects are open source there are simply too many contributors to list. 

        p The project is sponsored by <a href="http://andyet.com">&yet</a>.

        p The core contributor team consists of:

        ul
          li 
            a(href="http://twitter.com/henrikjoreteg") Henrik Joreteg
          li 
            a(href="http://twitter.com/lukekarrys") Luke Karrys
          li 
            a(href="http://twitter.com/lancestout") Lance Stout
          li 
            a(href="http://twitter.com/philip_roberts") Philip Roberts
          li 
            a(href="http://twitter.com/_crossdiver") Isaac Lewis
          li 
            a(href="http://twitter.com/wraithgar") Michael (Gar) Garvin
          
        p If you have benefitted from these tools, please consider <a href="http://humanjavascript.com">buying the book</a> or <a href="http://andyet.com">hiring &yet</a> to help with your next development project.

    script(src="docs/js/highlight.pack.js")
    script(src="docs/js/slugger.js")
    script(src="docs/js/setup.js")
    script(src="http://static.andyet.com/tag.js")
