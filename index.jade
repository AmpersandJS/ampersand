!!!5
html
    head
        link(type="text/css", rel="stylesheet", href="docs/main.css")
        title humanjavascript docs
    body
        aside
            .warning
                strong WARNING: 
                nav these docs are still very incomplete and still being written. <a href="github.com/henrikjoreteg/humanjs">help make it better</a>

            nav
                a(href="#introduction") introduction
                nav
                    a(href="#goals") goals
                    |  
                    a(href="#starting") starting a new app
                    | 
                    a(href="#downloads") downloads
                    | 
                    a(href="#book") the book

                a(href="#human-model") human-model
                nav
                    a(href="#model-define") define
                    | 
                    a(href="#model-type") type
                    | 
                    a(href="#model-initialize") initialize
                    | 
                    a(href="#model-props") props
                    | 
                    a(href="#model-session") session
                    | 
                    a(href="#model-derived") derived

                a(href="#human-view") human-view
                nav
                    a(href="#view-initialize") initialize
                    | 
                    a(href="#view-template") template
                    | 
                    a(href="#view-render") render
                    | 
                    a(href="#view-") renderAndBind
                    | 
                    a(href="#view-render-collection") renderCollection

                a(href="#router") router

                h2 external resources
                
                nav
                    a(href="http://projects.joreteg.com/humanjs-resources/") curated modules

                    a(href="http://humanjavscript.com") human javascript the book

        main
            h1.humanjs HumanJS

            
            h2#introduction Introduction

            p There are lots of toolkits for building single page apps or "Native HTML5 Apps" if you will. It seems they're either too generic and unopinionated or too tightly coupled or require a lot of knowledge and understanding of the framework. After having built lots of single page apps with various tools at <a href="http://andyet.com">&yet</a> we've surmised that the ideal seems to lie somewhere in the middle. 

            p Ultimately we'd like something that is comprised of lots of independent little tools that each to one thing (see Unix philosophy). But we'd also have an opinionated starting point for those new to the tools.

            p That's how HumanJS was born. Some of it simply uses <a href="http://backbonejs.org">Backbone.js</a> as is.

            p It's less of a framework and more of an approach to building single page apps.

            h3#goals Goals

            ul
                li Readability
                li Flexibility
                li Minimal magic
                li 100% client rendered
                li Use node.js to simplify develpment
                li App can be served as static content by any server (node.js not required in production)
                li Should requrie minimal framework-level knowledge (knowing javascript well gets you 95% there)
                li Easy to collaborate on:
                    ul 
                        li Clear file structure where everything has a logical place.
                        li Proper seperation of concerns
                li Provide an opinionated starting point
                li Use npm + browserify for package management but still play nicely with non-common JS libraries.

            h2#starting Starting a new app

            p In order to provide a useful starting point, we've included an application generator to either serve as a starting point for your app, or at least provide a reference implementation for how these tools were meant to be used.

            p This installer can be pulled from npm:

                pre
                    code $ npm install humanjs -g

            p Then in your project directory, simply run:

                pre
                    code $ humanjs

            p This will walk you through a short series of questions to help you get your app set up. When complete it will tell you how to run the server and you'll have a working single page app running at: <code>http://localhost:3000</code>

            p The demo project includes:
                
                ul
                    li A solution for using jade templates and templatizer to pre-compile client templates.
                    li A fully functional development environment where you can simply change a file in your server and re-fresh (without manual build steps).
                    li Changing one flag in your config puts it in production mode which builds and serves minfied, uniquely named, and permanently cachable static files.
                    li A clientside routing system using HTML5 pushState.
                    li A main layout template is rendered by the main view that includes a page container where page views are rendered as the user navigates to different URLs in the app.
                    li An example of rendering a collection of models in a container.
                    li A mock REST API to demonstrate how you might talk to an API to fetch data.
                    li A solution for declaritive binding of model properties to views, that is <em>completely</em> decoupled from the template engine. See human-view below for more details.
                    li A solution for creating readable, type-checked, and very explicitly defined models. This is hugely important in team enviroments where you need somewhere to reference what is being stored on your models. See human-model for more detail.

            h2#human-model human-model

            p Human Model is a Backbone compatible alternative to Backbone Models. 

            p While Backbone models work really well, they're not very readable in that looking at your model code you can't see what type of properties the model is storing. This becomes challenging when you're working in a team enviroment where other people want to see what's being stored. 

            p In addition there is generally two types of state that we want to store on a model: 
                ul
                    li State that comes from our API and represents the data persisted on the server.
                    li State that represents current browser session state. 

            p Take for instance a <code>selected</code> property on a model. That's likely something you would use to represent current UI state for the current browser session but not something you'd want to save back to the API when calling a model's <code>save</code> method. So there really are two types of state. It's challenging to make that type of distinction with Backbone. 

            p In human model you have to classify all your properties as either <code>prop</code> or a <code>session</code>. Other values you set will simply be ignored.

            h3#model-define define

            p The define method returns a constructor that can be used to generate instances of your model. 

            p It takes a single object that describes server properties (<code>props</code>), session properties (<code>session</code>), derived properties (<code>derived</code>) and any methods you'd like to attach to the model's prototype. These special property descriptions are exaplained individually below.

            p.sidenote It's called <code>define</code> instead of <code>extend</code> because it's doing something fundamentally different than what Backbone does with <code>extend</code>. Backbone's <code>extend</code> is simply extending a Backbone Model's prototype directly. Whereas Human Model's <code>define</code> is describing a set of properties that will be used to generate a prototype with getters and setters that store the types of values you describe in your definition. However, you can still use it very similarly because any methods you pass as part of your definition are attached to the prototype.
            
            

            p `Backbone.Model.extend` vs. `HumanModel.define`.

            h4#model-type type
            
            h4#model-initialize initialize
            
            h4#model-props props
            
            h4#model-session session
            
            h4#model-derived derived


            h2#human-view human-view

            h3#model-el el
            
            h3#model-initialize initialize
            
            h3#model-render render

            h3#view-render-collection renderCollection
            
            h3#model-renderAndBind renderAndBind

            h3#model-renderCollection renderCollection

            h2#router router

            p HumanJS just uses Backbone's router so just <a href="http://backbonejs.org/#Router">see backbone's router docs for more info</a>.

            h2#moonboots Moonboots

            h2#finding-modules Finding modules

            p There's a site containing a curated list of npm-installable modules with a quick filter box: <a href="http://projects.joreteg.com/humanjs-resources/">humanjs-resources</a> that should help you find things you may need. 

            p Also, there are lots of modules you can find via <a href="http://browserify.org/search">browserify's module search</a>.
