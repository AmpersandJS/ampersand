#!/usr/bin/env node

var fs = require('fs');
var commander = require('commander');
var colors = require('colors');
var _ = require('underscore');


var progress = 0,
    schema = [
        {
            name: 'projectFolder',
            question: 'This will create a new directory in: ' + __dirname + ' containing a skeleton of a human-javascript application.\n What do you want to call the folder? (Hit "ctrl + c" to quit)',
            prompt: 'Continue?',
            test: function (answer) {
                return answer;
            },
            message: 'Required'
        },
        {
            name: 'title',
            question: 'What is the human friendly title of your app? For example: "My Awesome App"',
            prompt: 'Application Title',
            test: function (answer) {
                if (answer) {
                    return answer;
                }
            },
            message: 'Required'
        },
        {
            name: 'framework',
            question: 'Which server framework do you want to use? hapi or express? (hapi is recommended)',
            prompt: 'Framework',
            test: function (answer) {
                if (answer) {
                    return answer;
                }
            },
            message: 'Required'
        },
        {
            name: 'author',
            question: 'What\'s your name? Used to populate "author" field of "package.json"' + '\n\n{\n  "name": "app",\n  "version": "0.0.1",\n  "author": "'.blue + 'Your Name",\n  "dependencies": ...\n}\n'.blue,
            prompt: 'Name',
            test: function (answer) {
                if (answer) {
                    return answer;
                }
            },
            message: 'Required'
        }
    ],
    result = {};


function buildQuestion(index) {
    var desc = schema[index],
        str;

    if (desc) {
        str = '\n' + (desc.question).green + '\n' + (desc.prompt + ':').grey + ' ';
        commander.prompt(str, function (answer) {
            var testedAnswer = desc.test(answer);
            if (typeof testedAnswer === 'string') {
                desc.answer = testedAnswer;
                progress++
            } else {
                console.log(("\nerror: " + desc.message).red);
            }
            buildQuestion(progress);
        });
    } else {
        schema.forEach(function (item) {
            if (item.name) result[item.name] = item.answer;
        });

        generateApp(result, function () {
            if (!err) {
                console.log('\n\n' + (result.appTitle.bold + ' was created!\n').green);
                console.log('now cd to it:\n\n' + ('    $ cd ' + result.projectFolder).grey + '\n\ninit your git repo:\n\n' + '    $ git init'.grey + '\n\ninstall dependencies:\n\n' + '    $ npm i'.grey + '\n\nand run it:\n\n' + '    $ node server'.grey + '\n');
                console.log('or if you prefer copy/paste:\n' + 'cd ' + result.projectFolder + ' && git init && npm i && node server');
                process.stdin.destroy();
            } else {
                console.log('error:'.red, err);
            }
        });
    }
}

buildQuestion(progress);
